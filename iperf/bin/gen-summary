#!/bin/bash
#
# At the current rundir, generate summary for each (result) dir with "run-$TAG" prefix
# Usage: gen-summary
# Ex: $ cd INGRESS/run-foo-2022-06-19-10:30:27
#     $ gen-summary
#

#
# Script that produce show-summary-<suffix> and  summary-BENCH-<suffix>
#
# show-summary:
# ----------
#    tags: irq=bal kernel=4.18.0-305.25.1.rt7.97.el8_4.x86_64 mtu=8900 osruntime=chroot pods-per-worker=1 rcos=49.84.202111111343-0 scale_out_factor=1 sdn=OVNKubernetes topo=intranode userenv=stream
#     common params: duration=120 ifname=eth0 protocol=tcp
#      unique params: nthreads=1 test-type=stream wsize=1024
#          primary period-id: 70A755D6-4F74-11EC-83C6-F4283B174252
#          primary period-id: 7310BC90-4F74-11EC-83C6-F4283B174252
#          primary period-id: 75795DB6-4F74-11EC-83C6-F4283B174252
#        result: (Gbps) samples: 5.27 4.42 5.12 mean: 4.94 min: 4.42 max: 5.27 stddev: 0.45 stddevpct: 9.12
#     ...
# summay-$BENCH:
#  ------------
#    cpuline: "value": "38.03"
#    cpuline: "value": "36.07"
#    cpuline: "value": "34.09"
#        result: (transactions-sec) samples: 745500.00 655500.00 649100.00 mean: 683366.67 min: 649100.00 max: 745500.00 stddev: 53904.11 stddevpct: 7.89
#    ----
#    34.80
#    65.83
#     ..
#   ----
#    21.71
#    16.01
#    ...
#

function calc { 
    awk "BEGIN{ printf \"%.2f\n\", $* }"; 
}

# iperf_metricx="rx-Gbits/sec rx-lost/sec rx-pps tx-Mbits/sec"
iperf_metrics="rx-Gbits/sec rx-lost/sec rx-pps tx-Mbits/sec"
# mpstat_metrics="Busy-CPU NonBusy-CPU"
mpstat_metrics="Busy-CPU NonBusy-CPU"

any_cpusum=0
any_cpusum_div=0
function any_cpu_accum {
    cpuline=""
    cpuline=$(crucible get metric --source mpstat --type Busy-CPU --period $1 --breakout cstype=worker < /dev/null | grep "value\"")
    #if [ $(echo $cpuline | awk -F ':' '{print NF}') < 2 ]; then
    if [ "$cpuline" == ""  ]; then
        # combined of cstype client and server
        cpuline=$(crucible get metric --source mpstat --type Busy-CPU --period $1  < /dev/null | grep "value\"")
    fi
    # TBD: above --breakout cstype=worker limits us to pod ONLY
    #echo "HN period : ${PP}"
    echo "cpuline:" $cpuline
    cpu=$(echo $cpuline | awk -F ':' '{print $2}')
    val=$(echo "$cpu" | bc)
    any_cpusum=$(calc $any_cpusum + $val)
    ((any_cpusum_div++))
}

function any_cpu_close {
    echo -n "worker CPU mean: "
    calc $any_cpusum/$any_cpusum_div
    echo ""
    any_cpusum=0
    any_cpusum_div=0
}


iperf_loss_accum=0
iperf_loss_div=0
function iperf_loss_accum {
    #echo pp=$1
    loss_line=$(crucible get metric --source iperf --type rx-lost/sec --period $1  < /dev/null | grep "value\"")
    #echo "HN period : ${PP}"
    echo "loss_line:" $loss_line
    val=$(echo $loss_line | awk -F ':' '{print $2}')
    # if exp notation, connvert it
    if [[ "$val" == *"e"* ]]; then
        # strip double quote from val
        val=$(eval echo $val)
        val=$(echo $val | awk '{printf("%d\n",$0)}')
        #echo converted_loss= $val
    else
        val=$(eval echo $val)
    fi

    iperf_loss_accum=$(calc $iperf_loss_accum + $val)
    ((iperf_loss_div++))
}

function iperf_loss_close {

    echo -n "rx-lost/sec mean: " ; calc $iperf_loss_accum/$iperf_loss_div
    echo ""
    iperf_loss_accum="0"
    iperf_loss_div=0
}


function f-gen-summ {
    exec 2> /dev/null
    
    rm summary-$1.txt
    exec > >(tee -ia summary-$1.txt)

    # reduce ./run/result-summary.txt 
    show $1 | grep -e common -e unique -e tag -e mean -e "primary period" > show-summary-$1.txt

    function CC {
      crucible get metric --source mpstat --type Busy-CPU --period $1 --breakout cstype=worker < dev/null
    }
    
    function show-perf {
         #grep -v "CPU" $1 |  grep -oP '(?<=mean: )[^ ]*'
         grep -e "result:" $1 |  grep -oP '(?<=mean: )[^ ]*'
         echo ""
    }
    
    function show-cpu {
         grep -e "CPU" $1 |  grep -oP '(?<=mean: )[^ ]*'
         echo ""
    }
    
    function show-rx-lost {
         grep -e "rx-lost" $1 |  grep -oP '(?<=mean: )[^ ]*'
    }
    function show-all {
        cat $1
        echo "-- TPUT --"
        show-perf $1
        echo "-- CPU --"
        show-cpu $1
        echo "-- rx-lost --"
        show-rx-lost $1
    }
    

    # For multiple samples of  non-primary metric i.e CPU, we need to compute mean.
    # iteration-id: F7F38836-EEDC-11EC-A989-C001F56639B4
    #    unique params: passthru=-V,-fm,-b2000m,-l256,-i1,-t60 protocol=udp
    #    primary-period name: measurement
    #    samples:
    #      sample-id: F7F8343A-EEDC-11EC-8B4B-C001F56639B4
    #        primary period-id: F7F9122E-EEDC-11EC-BA2F-C001F56639B4
    #        period range: begin: 1655538785134 end: 1655538845133
    #      sample-id: F7FD2D64-EEDC-11EC-B176-C001F56639B4
    #        primary period-id: F7FDDF02-EEDC-11EC-A89F-C001F56639B4
    #        period range: begin: 1655538942527 end: 1655539002526
    #      sample-id: F803E910-EEDC-11EC-988C-C001F56639B4
    #        primary period-id: F804DFDC-EEDC-11EC-988C-C001F56639B4
    #        period range: begin: 1655539099927 end: 1655539159926
    #      result: (rx-Gbits/sec) samples: 0.38 0.24 0.24 mean: 0.29 min: 0.24 max: 0.38 stddev: 0.08 stddevpct: 27.56

    Counter=0
    cpusum=0.0
    cpusum_div=0
    while IFS='' read -r  LinefromFile || [[ -n "${LinefromFile}" ]]; do
        ((Counter++))
        #echo "Accessing line $Counter: ${LinefromFile}"
        if [[ "$LinefromFile" =~ "tags" || "$LinefromFile" =~ "unique" ]]; then
            echo "${LinefromFile}"
        fi

        # When seeing line "primary period-id: FF1FE266-EFDC-11EC-B247-A157F86639B4", start new submetric mean computation.
        if [[ "$LinefromFile" =~ .*"primary".* ]]; then
            #echo "HN primary line: ${LinefromFile}"
            pp=$(echo $LinefromFile | awk -F ':' '{print $2}')
            any_cpu_accum $pp
            iperf_loss_accum $pp
        fi
    
        # When seing line "result: (rx-Gbits/sec) samples: 0.26 mean: 0.26 min: 0.26 max: 0.26 stddev: NaN stddevpct: NaN",
        # close out the current mean computation.
        if [[ "$LinefromFile" =~ .*"mean".* ]]; then
            echo "${LinefromFile}"
            any_cpu_close
            iperf_loss_close
        fi
    
    done < show-summary-$1.txt
    
    # add show-summary output and make a copy of the final summary in this run dir.
    
    tempfile=$(mktemp)
    #echo $tempfile
    cp summary-$1.txt $tempfile
    show-all $tempfile > summary-$1.txt
    
    # save sum and show files to run dir.
    cp show-summary-$1.txt $1/ ;  chmod -w  show-summary-$1.txt 
    cp summary-$1.txt $1  $1/ ; chmod -w summary-$1.txt
    rm $tempfile
}

# Discover bench prefix i.e iperf, uperf, flexran to know what blob to process. It will process "iperf--run-xxxxx"
bench=""
while read line; do
    #echo $line
    bench=$(echo $line |  awk '{if(/crucible.*run/) print $4}')
    if [ "$bench" != "" ]; then
        break
    fi
done < "../run.sh"

RUNS="$(/bin/ls -p | grep / | grep ^$bench )"
# all dirs with matching prefix ii.e  iperf--2022-06-19_14:30:29_UTC--09f2d1fd-7695-46e9-88f8-bbf877fa7ce4/
# Should be one match. Multiple matches is confusing, but that is under the users control.
for run in $RUNS
do
    #remove trailing /
    name=${run::-1}
    # generate summary
    echo f-gen-summ $name
    f-gen-summ $name
done

