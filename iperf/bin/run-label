#!/bin/bash

# Usage: this-any-run [BENCH i.e flexran iperf uperf]

source /home/hnhan/bin/functions.sh
#
#  1. Invoke run.sh
#  2. move the results to under label i.e run-BENCH-2021-11-27-05:02:26/
#  3. Invoke genit: iterate over each run and invoke gensum
#  4. gensum produces:
#        show-summary-BENCH--2021-11-27_05:02:31--b50b3953-2aa8-4b31-b22b-2fd49254cfcb.txt
#        summary-BENCH--2021-11-27_05:02:31--b50b3953-2aa8-4b31-b22b-2fd49254cfcb.txt
#  5. Tar it
#

if [ -f ./thislabel ]; then
    LABEL=$(cat ./thislabel)
else
    LABEL=$1
fi

DIR="run-${LABEL}-$(date "+%Y-%m-%d-%T")"
echo $DIR
if [ ! -d  $DIR ]; then
    mkdir $DIR
fi

echo "working dir" $(pwd)
#crucible es init
bash run.sh 2>&1 | tee $DIR.log
result_path=$(realpath /var/lib/crucible/run/latest)
mv $result_path $DIR/
pushd $DIR

gen-me $1
tar-me $1
popd
# EOF

function gen-me {
    RUNS="$(/bin/ls -p | grep / | grep ^$1 )"
    for run in $RUNS
    do
        #remove trailing /
        name=${run::-1}
        # generate summary
        summ-me $name
    done
}

    
function CC {
    crucible get metric --source mpstat --type Busy-CPU --period $1 --breakout cstype=worker < dev/null
}
    
function show-perf {
    grep -v "CPU" $1 |  grep -oP '(?<=mean: )[^ ]*'
}
    
function show-cpu {
    grep -e "CPU" $1 |  grep -oP '(?<=mean: )[^ ]*'
}
    
function show-all {
    cat $1
    echo "----"
    show-perf $1
    echo "----"
    show-cpu $1
}
    

function summ-me {
    
    #!/bin/bash
    #
    # Script that produce show-summary-<suffix> and  summary-BENCH-<suffix>
    #
    # show-summary:
    # ----------
    #    tags: irq=bal kernel=4.18.0-305.25.1.rt7.97.el8_4.x86_64 mtu=8900 osruntime=chroot pods-per-worker=1 rcos=49.84.202111111343-0 scale_out_factor=1 sdn=OVNKubernetes topo=intranode userenv=stream
    #     common params: duration=120 ifname=eth0 protocol=tcp
    #      unique params: nthreads=1 test-type=stream wsize=1024
    #          primary period-id: 70A755D6-4F74-11EC-83C6-F4283B174252
    #          primary period-id: 7310BC90-4F74-11EC-83C6-F4283B174252
    #          primary period-id: 75795DB6-4F74-11EC-83C6-F4283B174252
    #        result: (Gbps) samples: 5.27 4.42 5.12 mean: 4.94 min: 4.42 max: 5.27 stddev: 0.45 stddevpct: 9.12
    #     ...
    # summay-$BENCH:
    #  ------------
    #    cpuline: "value": "38.03"
    #    cpuline: "value": "36.07"
    #    cpuline: "value": "34.09"
    #        result: (transactions-sec) samples: 745500.00 655500.00 649100.00 mean: 683366.67 min: 649100.00 max: 745500.00 stddev: 53904.11 stddevpct: 7.89
    #    ----
    #    34.80
    #    65.83
    #     ..
    #   ----
    #    21.71
    #    16.01
    #    ...
    #
    
    exec 2> /dev/null
    #exec 1> summary-$1.txt
    
    rm summary-$1.txt
    exec > >(tee -ia summary-$1.txt)
    
    
    
    #show $1 | grep -e tag -e mean -e "primary period" > show-summary-$1.txt
    show $1 | grep -e common -e unique -e tag -e mean -e "primary period" > show-summary-$1.txt
    
    #cat /tmp/uuu

    Counter=0
    cpusum=0.0
    cpusum_div=0
    while IFS='' read -r  LinefromFile || [[ -n "${LinefromFile}" ]]; do
    
        ((Counter++))
        #echo "Accessing line $Counter: ${LinefromFile}"
        if [[ "$LinefromFile" =~ "tags" ]]; then
            echo "${LinefromFile}"
        fi
        if [[ "$LinefromFile" =~ .*"primary".* ]]; then
            #echo "HN primary line: ${LinefromFile}"
            PP=$(echo $LinefromFile | awk -F ':' '{print $2}')
            cpuline=$(crucible get metric --source mpstat --type Busy-CPU --period $PP --breakout cstype=worker < /dev/null | grep "value\"")
            #echo "HN period : ${PP}"
            echo "cpuline:" $cpuline
            cpu=$(echo $cpuline | awk -F ':' '{print $2}')
            val=$(echo "$cpu" | bc)
            cpusum=$(echo "$cpusum + $val" | bc)
            ((cpusum_div++))
        fi
    
        if [[ "$LinefromFile" =~ .*"mean".* ]]; then
            echo "${LinefromFile}"
            echo -n "worker CPU mean: "
            echo "scale=2;$cpusum/$cpusum_div" | bc
            cpusum=0.0; cpusum_div=0
        fi
    
    done < show-summary-$1.txt
    
    # add show-summary output and make a copy of the final summary in this run dir.
    
    tempfile=$(mktemp)
    #echo $tempfile
    cp summary-$1.txt $tempfile
    show-all $tempfile >> summary-$1.txt
    
    # save sum and show files to run dir.
    cp show-summary-$1.txt $1/ ;  chmod -w  show-summary-$1.txt 
    cp summary-$1.txt $1  $1/ ; chmod -w summary-$1.txt
    rm $tempfile
    #EOF    
}

function tar-me {    
    # Usage: this_cmd [flexran | uperf | iperf]
    
    RUNS="$(/bin/ls -p | grep / | grep $1 )"
    
    # "ls -p" shows dir entries ended with /
    
    for run in $RUNS
    do
        echo $run
        # remove ending /
        name=${run::-1}
        tar --force-local -czvf $name.tgz $name
        if [ $? -eq 0 ]; then
            echo "success"
            rm -fr $run
            chmod -w $name.tgz
         else
            echo "failure"
            rm $run.tgz
         fi
    done
}    

